{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { SERVER_API_URL } from '../constants/app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet StudentService = /*#__PURE__*/(() => {\n  class StudentService {\n    constructor(http) {\n      this.http = http;\n      this.studentsUrl = `${SERVER_API_URL}/student`;\n    }\n    getStudents() {\n      return this.http.get(this.studentsUrl).pipe(tap(_ => console.log('fetched students')), catchError(this.handleError('getStudents', [])));\n    }\n    getStudent(jmbag) {\n      const url = `${this.studentsUrl}/${jmbag}`;\n      return this.http.get(url).pipe(tap(_ => console.log(`fetched student jmbag=${jmbag}`)), catchError(this.handleError(`getStudent jmbag=${jmbag}`)));\n    }\n    updateStudent(student) {\n      const url = `${this.studentsUrl}/${student.jmbag}`;\n      return this.http.put(url, student).pipe(tap(_ => console.log(`updated student jmbag=${student.jmbag}`)), catchError(this.handleError('updateStudent')));\n    }\n    addStudent(student) {\n      return this.http.post(this.studentsUrl, student).pipe(tap(newStudent => console.log(`added student w/ JMBAG=${newStudent.jmbag}`)), catchError(this.handleError('addStudent')));\n    }\n    deleteStudent(student) {\n      const jmbag = typeof student === 'string' ? student : student.jmbag;\n      const url = `${this.studentsUrl}/${jmbag}`;\n      return this.http.delete(url).pipe(tap(_ => console.log(`deleted student JMBAG=${jmbag}`)), catchError(this.handleError('deleteStudent')));\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(operation);\n        console.error(error);\n        return of(result);\n      };\n    }\n  }\n  StudentService.ɵfac = function StudentService_Factory(t) {\n    return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  StudentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentService,\n    factory: StudentService.ɵfac,\n    providedIn: 'root'\n  });\n  return StudentService;\n})();\nexport { StudentService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}